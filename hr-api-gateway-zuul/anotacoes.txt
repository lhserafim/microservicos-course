GITHUB: https://github.com/acenelio/ms-course

Fase 2: Eureka, Hystrix, Zuul

1.  Configurando o gateway Zuul
    1.1.    Criar o projeto do Zuul adicionando as dependências de Web, Eureka Client e Zuul
    1.2.    Adicionar as anotações no Application: @EnableEurekaClient e @EnableZuulProxy
    1.3.    Configurar a conexão com o Eureka no arquivo application.properties definindo: O nome da aplicação,
            a porta, o endereço do servidor eureka, e as rotas dos microserviços.
            Vide arquivo para exemplo.
        1.3.1.  As definições das rotas: service-id e path são essenciais para que eu possa acessar o endpoint do MS
                utilizando o endereço do Zuul.
                Ex.: http://localhost:8765/hr-worker/workers
                     http://localhost:8765/hr-payroll/payments/1/days/10
    1.4.    Com estas implementações, estamos colocando os nossos MS dentro do gateway e assim podemos impedir o acesso
            direto as API's
2.  Zuul timeout
    2.1.    Mesmo o timeout de Hystrix e Ribbon configurado em um microsserviço, se o Zuul não tiver seu timeout
            configurado, para ele será um problema de timeout. Então precisamos configurar o timeout no Zuul.
        2.1.1.  Configurar no arquivo application.properties o timeout do Zuul. As configurações são as mesmas que foram
                definidas no MS hr-payroll
    2.2.    Se o timeout estiver configurado somente em Zuul, o Hystrix vai chamar o método alternativo no microsserviço
            específico. Ou seja, as configurações de timeout precisam estar tanto no Zuul quanto nos MS
3.  Implementando o FeignClient para hr-oauth acessar hr-user
    3.1.    No gateway zuul, em application.properties, definir as rotas para que seja possível acessar o MS através do Zuul
4.  Implementando o JWT
    4.1.    Para que o JWT funcione no Zuul é necessário implentar uma configuração no arquivo application.properties
            Ex.: zuul.routes.oauth.sensitive-headers=Cookie,Set-Cookie
5.  Implementando o RESOURCE SERVER. Este papel é desenvolvido pelo Zuul
    5.1.    Adicionar a extensão do spring-cloud-starter-oauth2
    5.2.    O Zuul vai precisar decriptografar o token JWT, por isso será necessário criar o mesmo AppConfig que foi criado
            no MS hr-oauth, para que tenhamos os BEANs carregados no container do Spring Boot
    5.3.    Criar a classe ResourceServerConfig, pois o Zuul é o nosso Resource Server
        5.3.1.  Colocar as anotações @ResourceServerConfig e @Configuration e extender ResourceServerConfigurerAdapter
        5.3.2.  Injetar o token JwtTokenStore
        5.3.3.  Implementar os 2 métodos configure
        DICA! Usar constantes no antMatchers() ao invés de colocar os paths diretamente
6.  Levando as configurações de segurança para o Config Server
    6.1.    O meu Zuul precisa ser cliente do Config Server. Adicionar dependências ao pom.xml
    6.2.    Em seguida, configurar o meu arquivo AppConfig para que ele recupere os valores do Config Server
        6.2.1.  Adicionar a anotação: @RefreshScope (do actuator), para que seja possível atualizar as configurações mesmo com o Zuul
                online
        6.2.2.  Adicionar uma variável para receber a senha do Config Server, interpolando usando @Value
        6.2.3.  Passar a variável ao setSigningKey()
    6.3.    Para que o @RefreshScope funcione, necessário adicionar os paths do actuator no ResourceServerConfig
    6.4.    Criar o arquivo bootstrap.properties, para apontar para o servidor de configuração. Qualquer projeto que seja
            cliente do servidor de configuração necessita deste arquivo
    6.5.    Criar o arquivo de configuração dentro do meu respositório git https://github.com/lhserafim/ms-course-configs/tree/master
        6.5.1.  Criar o arquivo application.properties. Foi criado com este nome porque ele pode ser usado por qualquer
                ms do meu sistema. Ou seja é uma configuração do sistema
                Ex.:
                oauth.client.name=myappname123
                oauth.client.secret=myappsecret123
                jwt.secret=MY-JWT-SECRET
























