GITHUB: https://github.com/acenelio/ms-course

Fase 1: Comunicação simples, Feign, Ribbon

1.  Vamos implementar a entidade Payment. Esta entidade não existirá no BD será apenas em memória
    1.1.    Fazer a criação da entidade Payment
    1.2.    Criar um serviço para instanciar a entidade Payment. Por enquanto estou retornado um objeto mockado
    1.3.    Criar a resource e endpoints
        1.3.1.  Exemplo de rota com 2 parâmetros: @GetMapping(value = "/{workerId}/days/{days}"
    1.4.    Atualizar o arquivo application.properties com o nome e porta
2.  Para fazer um projeto comunicar com o outro, POR ENQUANTO utilizaremos um RestTemplate. Que é uma maneira clássica
    de fazer a comunicação entre webservices
    2.1.    A nossa necessidade é retirar o código mockado dentro da PaymentService e fazer uma chamada REST para a API
            hr-worker
    2.2.    Para podermos utilizar o RestTemplate, primeiramente teremos que criar um Bean. Este Bean será criado dentro
            de uma classe de configuração AppConfig. Lembrando que o bean respeita o principio de Singleton
        2.2.1.  Anotar a classe com @Configuration e fazer a implementação do método que cria uma instancia de RestTemplate
    2.3.    Na PaymentService, fazer a injeção do meu Bean (RestTemplate) para fazer a chamada do meu webservice de hr-worker
    2.4.    Criar uma propriedade em application.properties para passar a base da URL do meu MS. Ex.: hr-worker.host=http://localhost:8001
            e chamá-la através da @Value("${hr-worker.host}"), fazendo a interpolação da chave/valor do .properties
        2.4.1.  Para chamar a API hr-worker, precisei criar a classe Worker e chamar o método restTemplate.getForObject()
        2.4.2.  IMPORTANTE! Isto ainda não é microserviço. Como estamos passando a URL do host de forma estática não é um MS.
3.  Vamos implementar um componente do spring cloud chamado de feign. O feign é uma forma alternativa de comunicar um projeto
    com o outro e ele está integrado com as outras ferramentas do spring cloud.
    Vantagens do feign versos RestTemplate é que deixa o código mais limpo, além de já estar integrado com o spring cloud
    3.1.    IMPORTANTE! Além da dependency, adicionar o dependencyManagement, conforme arquivo pom.xml
    3.2.    Para que exista uma configuração básica do feign e para que ele fique disponível para injetar, vamos precisar adicionar
            uma anotação na classe HrPayrollApplication que é @EnableFeignClients
    3.3.    Criar uma Interface FeignClient "WorkerFeignClient", fazer as anotações e copiar as assinaturas dos métodos que
            eu quero acessar do outro projeto (api)
    3.4.    Implementar o feign ao invés do restTemplate no PaymentService.
4.  Balanceamento de carga com Ribbon
    4.1.    Adicionar a dependência do ribbon ao pom.xml
    4.2.    IMPORTANTE o nosso projeto hr-payroll vai ser um CLIENTE RIBBON, ele fará a chamada do hr-worker, que terá mais
            de 1 instância levantada e esta chamada será feita através do balanceamento de carga
    4.3.    Para configurar o projeto hr-payroll como um cliente ribbon, ir HrPayrollApplication e adicionar a anotação
            @RibbonClient(name = "hr-worker")
    4.4.    Em application.properties fazer a definição da lista de servidores que terão instancias de hr-worker
            Ex.: hr-worker.ribbon.listOfServers=localohost:8001,localhost:8002
        4.4.1.  IMPORTANTE! Por enquanto esta definição está sendo feita de forma estática!
    4.5.    Remover o paramêtro url de @FeignClient em WorkerFeignClient, pois agora esta informação vem das propriedades
    4.6.    Fazer adaptações para poder fazer o teste em hr-worker
        4.6.1.  Em WorkerResource, adicionar Logger (de slf4j) e Enviroment (de springframework)
        4.6.2.  Dentro da minha API recuperar a porta do enviroment e logar no console
                Ex.: logger.info("PORT = " + environment.getProperty("local.server.port"));
            4.6.2.1.    Esta implementação é apenas para testes
    4.7.    Configurando o IntelliJ para permitir 2 instâncias em portas diferentes
        4.7.1.  Ir em Edit Configurations (do run)
        4.7.2.  Modify Options -> Allow Multiple Instances
        4.7.3.  Add VM Options e digitar: -Dserver.port=8001
        4.7.4.  Duplicar a application e repetir as configurações alterando a porta

 Fase 2: Eureka, Hystrix, Zuul

 5.  Configurar os MS hr-worker como cliente do Eureka
     5.1.    Adicionar a dependencia do Eureka Client no pom.xml.
         5.1.1.  IMPORTANTE! Necessário adicionar o dependencyManagement ao pom.xml
     5.2.    Adicionar a localização do servidor Eureka ao application.properties para que o meu MS hr-worker possa se
             registrar nele. Ex.: eureka.client.service-url.defaultZone=http://localhost:8761/eureka
     5.3.    Na classe Application, colocar a anotação @EnableEurekaClient e remover a @RibbonClient, pois o Eureka já
             tem o balanceamento de carga implementado

























