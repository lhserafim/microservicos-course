GITHUB: https://github.com/acenelio/ms-course

Fase 4: autenticação e autorização

1.  Criar o MS hr-user com as dependências Eureka Client, Web
2.  Configurar o MS
    2.1.    Colocar a anotação de cliente do eureka na application @EnableEurekaClient
    2.2.    Configurar o arquivo application.properties, definindo nome do MS, Porta aleatória, end. do servidor eureka
3.  Implementando o FeignClient para hr-oauth acessar hr-user
    3.1.    Adicionar a dependência do FeignClient no pom.xml
    3.2.    Em Application, adicionar a anotação @EnableFeignClients
    3.3.    Criar as entidades Role e User de forma padrão e sem anotações JPA
        3.3.1.  As entidades foram criadas pois hr-oauth será um cliente de hr-user (que originalmente criou estas entidades)
                e como eu precisarei recuperar estas informações necessito ter as mesmas entidades aqui. O mesmo foi feito
                entre hr-payroll (client) e hr-worker
    3.4.    Criar a interface UserFeignClient. É esta interface que fará a comunicação entre o meu hr-oauth e hr-user
        3.4.1.  Colocar as anotações @Component e @FeignClient(name = "hr-user",path = "/users")
        3.4.2.  Copiar a assinatura do método que eu quero acessar em hr-user
    3.5.    Criar uma comunicação entre o hr-oauth e hr-user. Uma vez que eu já tenho a interface UserFeignClient eu já
            tenho "mapeada" a comunicação entre os MS's. Porém para que eu possa efetivamente comunicá-los eu preciso criar
            um service que irá injetar a dependência desta interface e executar o método
        3.5.1.  Criar o service UserService e anotar com @Service
        3.5.2.  Implementar o método que irá executar o método criado na interface
    3.6.    Criar a resource(controller), anotar com @RestController e @RequestMapping
        3.6.1.  Injetar o service UserService
        3.6.2.  Criar o endpoint /search, que basicamente irá chamar o meu service e pesquisa pelo email
4.  Implementando o JWT
    4.1.    Para que o JWT funcione no Zuul é necessário implentar uma configuração no arquivo application.properties
            Ex.: zuul.routes.oauth.sensitive-headers=Cookie,Set-Cookie
    4.2.    Adicionar a extensão spring-cloud-starter-oauth2 ao pom.xml
    4.3.    Criar uma package config e dentro desta 3 classes: AppConfig, AuthorizationServerConfig e SecurityConfig
        4.3.1.  Criar a classe de configuração AppConfig. Esta classe será responsável por criar os Beans: BCryptPasswordEncoder,
                JwtAccessTokenConverter e JwtTokenStore
                IMPORTANTE! Isto é feito para que eu possa injetar estas bibliotecas em outras classes
            4.3.1.1.    Anotar a classe com @Configuration, para que o Spring Boot escaneie a classe
            4.3.1.2.    Criar os métodos Beans, implementação padrão!
        4.3.2.  Criar a classe AuthorizationServerConfig, que é a classe que irá determinar que o nosso MS hr-oauth é um
                Authorization Server, por isso vamos usar @EnableAuthorizationServer
            4.3.2.1.    Adicionar as anotações: @Configuration, @EnableAuthorizationServer
            4.3.2.2.    Extender a classe AuthorizationServerConfigurerAdapter e implementar os métodos configure
            4.3.2.3.    Injetar as dependências criadas em AppConfig e também AuthenticationManager
                        Ex.:
                        @Autowired
                        private BCryptPasswordEncoder passwordEncoder;
                        @Autowired
                        private JwtAccessTokenConverter accessTokenConverter;
                        @Autowired
                        private JwtTokenStore tokenStore;
                        @Autowired
                        private AuthenticationManager authenticationManager;
        4.3.3.  Criar a classe SecurityConfig, que irá implementar o Spring Security
            4.3.3.1.    Anotar a classe como @Configuration e extender WebSecurityConfigurerAdapter
            4.3.3.2.    Implementar o método configure
            4.3.3.3.    Injetar as dependências
    4.4.    Atualizar a entidade User implementando UserDetails
        4.4.1.  Implementar todos métodos de UserDetails
            4.4.1.1.    IMPORTANTE! Aqui não foram implementadas lógicas, por isso os métodos ficaram retornando true
    4.5.    Adicionar a implementação de UserDetailsService em UserService
        4.5.1.  Implementar o método loadUserByUsername
























